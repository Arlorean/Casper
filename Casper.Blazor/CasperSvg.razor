@implements IDisposable
@inject CasperBlazor Spectrum

<svg class="casper-svg"
     viewBox="0 0 @Screen.OuterRectangle.Width @Screen.OuterRectangle.Height"
     shape-rendering="crispEdges"
     xmlns="http://www.w3.org/2000/svg">
    <rect x="0" y="0" width="@Screen.OuterRectangle.Width" height="@Screen.OuterRectangle.Height" fill="@border" />
    <g transform="translate(@Screen.InnerRectangle.X @Screen.InnerRectangle.Y)">
    @for (var y = 0; y < Screen.Height; ++y) {
        for (var x = 0; x < Screen.Width; ++x) {
            <rect x="@x" y="@y" width="1" height="1" fill="@pixels[x,y]" />
        }
    }
    </g>
</svg>

@code {
    string border;
    string[,] pixels = new string[Screen.Width, Screen.Height];
    bool screenUpdated;

    static string[] colorStrings = Colors.Palette.Select(c => $"#{c.R:X2}{c.G:X2}{c.B:X2}").ToArray();

    protected override void OnInitialized() {
        Spectrum.Interrupt += Redraw;
        Spectrum.Screen.RenderPixel += RenderPixel;
        Spectrum.Screen.RenderBorder += RenderBorder;
        Spectrum.RefreshScreen();
    }

    void IDisposable.Dispose() {
        Spectrum.Screen.RenderPixel -= RenderPixel;
        Spectrum.Interrupt -= Redraw;
    }

    public void RenderPixel(int x, int y, ColorIndex colorIndex) {
        pixels[x, y] = colorStrings[(int)colorIndex];
        screenUpdated = true;
    }

    public void RenderBorder(ColorIndex colorIndex) {
        border = colorStrings[(int)colorIndex];
        screenUpdated = true;
    }

    void Redraw() {
        if (screenUpdated) {
            screenUpdated = false;
            InvokeAsync(StateHasChanged);
        }
    }
}
